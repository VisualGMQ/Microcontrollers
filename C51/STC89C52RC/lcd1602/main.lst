                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _WriteDate
                                     13 	.globl _WriteCmd
                                     14 	.globl _WaitAck
                                     15 	.globl _GetStatus
                                     16 	.globl _CY
                                     17 	.globl _AC
                                     18 	.globl _F0
                                     19 	.globl _RS1
                                     20 	.globl _RS0
                                     21 	.globl _OV
                                     22 	.globl _F1
                                     23 	.globl _P
                                     24 	.globl _PS
                                     25 	.globl _PT1
                                     26 	.globl _PX1
                                     27 	.globl _PT0
                                     28 	.globl _PX0
                                     29 	.globl _RD
                                     30 	.globl _WR
                                     31 	.globl _T1
                                     32 	.globl _T0
                                     33 	.globl _INT1
                                     34 	.globl _INT0
                                     35 	.globl _TXD
                                     36 	.globl _RXD
                                     37 	.globl _P3_7
                                     38 	.globl _P3_6
                                     39 	.globl _P3_5
                                     40 	.globl _P3_4
                                     41 	.globl _P3_3
                                     42 	.globl _P3_2
                                     43 	.globl _P3_1
                                     44 	.globl _P3_0
                                     45 	.globl _EA
                                     46 	.globl _ES
                                     47 	.globl _ET1
                                     48 	.globl _EX1
                                     49 	.globl _ET0
                                     50 	.globl _EX0
                                     51 	.globl _P2_7
                                     52 	.globl _P2_6
                                     53 	.globl _P2_5
                                     54 	.globl _P2_4
                                     55 	.globl _P2_3
                                     56 	.globl _P2_2
                                     57 	.globl _P2_1
                                     58 	.globl _P2_0
                                     59 	.globl _SM0
                                     60 	.globl _SM1
                                     61 	.globl _SM2
                                     62 	.globl _REN
                                     63 	.globl _TB8
                                     64 	.globl _RB8
                                     65 	.globl _TI
                                     66 	.globl _RI
                                     67 	.globl _P1_7
                                     68 	.globl _P1_6
                                     69 	.globl _P1_5
                                     70 	.globl _P1_4
                                     71 	.globl _P1_3
                                     72 	.globl _P1_2
                                     73 	.globl _P1_1
                                     74 	.globl _P1_0
                                     75 	.globl _TF1
                                     76 	.globl _TR1
                                     77 	.globl _TF0
                                     78 	.globl _TR0
                                     79 	.globl _IE1
                                     80 	.globl _IT1
                                     81 	.globl _IE0
                                     82 	.globl _IT0
                                     83 	.globl _P0_7
                                     84 	.globl _P0_6
                                     85 	.globl _P0_5
                                     86 	.globl _P0_4
                                     87 	.globl _P0_3
                                     88 	.globl _P0_2
                                     89 	.globl _P0_1
                                     90 	.globl _P0_0
                                     91 	.globl _B
                                     92 	.globl _ACC
                                     93 	.globl _PSW
                                     94 	.globl _IP
                                     95 	.globl _P3
                                     96 	.globl _IE
                                     97 	.globl _P2
                                     98 	.globl _SBUF
                                     99 	.globl _SCON
                                    100 	.globl _P1
                                    101 	.globl _TH1
                                    102 	.globl _TH0
                                    103 	.globl _TL1
                                    104 	.globl _TL0
                                    105 	.globl _TMOD
                                    106 	.globl _TCON
                                    107 	.globl _PCON
                                    108 	.globl _DPH
                                    109 	.globl _DPL
                                    110 	.globl _SP
                                    111 	.globl _P0
                                    112 ;--------------------------------------------------------
                                    113 ; special function registers
                                    114 ;--------------------------------------------------------
                                    115 	.area RSEG    (ABS,DATA)
      000000                        116 	.org 0x0000
                           000080   117 _P0	=	0x0080
                           000081   118 _SP	=	0x0081
                           000082   119 _DPL	=	0x0082
                           000083   120 _DPH	=	0x0083
                           000087   121 _PCON	=	0x0087
                           000088   122 _TCON	=	0x0088
                           000089   123 _TMOD	=	0x0089
                           00008A   124 _TL0	=	0x008a
                           00008B   125 _TL1	=	0x008b
                           00008C   126 _TH0	=	0x008c
                           00008D   127 _TH1	=	0x008d
                           000090   128 _P1	=	0x0090
                           000098   129 _SCON	=	0x0098
                           000099   130 _SBUF	=	0x0099
                           0000A0   131 _P2	=	0x00a0
                           0000A8   132 _IE	=	0x00a8
                           0000B0   133 _P3	=	0x00b0
                           0000B8   134 _IP	=	0x00b8
                           0000D0   135 _PSW	=	0x00d0
                           0000E0   136 _ACC	=	0x00e0
                           0000F0   137 _B	=	0x00f0
                                    138 ;--------------------------------------------------------
                                    139 ; special function bits
                                    140 ;--------------------------------------------------------
                                    141 	.area RSEG    (ABS,DATA)
      000000                        142 	.org 0x0000
                           000080   143 _P0_0	=	0x0080
                           000081   144 _P0_1	=	0x0081
                           000082   145 _P0_2	=	0x0082
                           000083   146 _P0_3	=	0x0083
                           000084   147 _P0_4	=	0x0084
                           000085   148 _P0_5	=	0x0085
                           000086   149 _P0_6	=	0x0086
                           000087   150 _P0_7	=	0x0087
                           000088   151 _IT0	=	0x0088
                           000089   152 _IE0	=	0x0089
                           00008A   153 _IT1	=	0x008a
                           00008B   154 _IE1	=	0x008b
                           00008C   155 _TR0	=	0x008c
                           00008D   156 _TF0	=	0x008d
                           00008E   157 _TR1	=	0x008e
                           00008F   158 _TF1	=	0x008f
                           000090   159 _P1_0	=	0x0090
                           000091   160 _P1_1	=	0x0091
                           000092   161 _P1_2	=	0x0092
                           000093   162 _P1_3	=	0x0093
                           000094   163 _P1_4	=	0x0094
                           000095   164 _P1_5	=	0x0095
                           000096   165 _P1_6	=	0x0096
                           000097   166 _P1_7	=	0x0097
                           000098   167 _RI	=	0x0098
                           000099   168 _TI	=	0x0099
                           00009A   169 _RB8	=	0x009a
                           00009B   170 _TB8	=	0x009b
                           00009C   171 _REN	=	0x009c
                           00009D   172 _SM2	=	0x009d
                           00009E   173 _SM1	=	0x009e
                           00009F   174 _SM0	=	0x009f
                           0000A0   175 _P2_0	=	0x00a0
                           0000A1   176 _P2_1	=	0x00a1
                           0000A2   177 _P2_2	=	0x00a2
                           0000A3   178 _P2_3	=	0x00a3
                           0000A4   179 _P2_4	=	0x00a4
                           0000A5   180 _P2_5	=	0x00a5
                           0000A6   181 _P2_6	=	0x00a6
                           0000A7   182 _P2_7	=	0x00a7
                           0000A8   183 _EX0	=	0x00a8
                           0000A9   184 _ET0	=	0x00a9
                           0000AA   185 _EX1	=	0x00aa
                           0000AB   186 _ET1	=	0x00ab
                           0000AC   187 _ES	=	0x00ac
                           0000AF   188 _EA	=	0x00af
                           0000B0   189 _P3_0	=	0x00b0
                           0000B1   190 _P3_1	=	0x00b1
                           0000B2   191 _P3_2	=	0x00b2
                           0000B3   192 _P3_3	=	0x00b3
                           0000B4   193 _P3_4	=	0x00b4
                           0000B5   194 _P3_5	=	0x00b5
                           0000B6   195 _P3_6	=	0x00b6
                           0000B7   196 _P3_7	=	0x00b7
                           0000B0   197 _RXD	=	0x00b0
                           0000B1   198 _TXD	=	0x00b1
                           0000B2   199 _INT0	=	0x00b2
                           0000B3   200 _INT1	=	0x00b3
                           0000B4   201 _T0	=	0x00b4
                           0000B5   202 _T1	=	0x00b5
                           0000B6   203 _WR	=	0x00b6
                           0000B7   204 _RD	=	0x00b7
                           0000B8   205 _PX0	=	0x00b8
                           0000B9   206 _PT0	=	0x00b9
                           0000BA   207 _PX1	=	0x00ba
                           0000BB   208 _PT1	=	0x00bb
                           0000BC   209 _PS	=	0x00bc
                           0000D0   210 _P	=	0x00d0
                           0000D1   211 _F1	=	0x00d1
                           0000D2   212 _OV	=	0x00d2
                           0000D3   213 _RS0	=	0x00d3
                           0000D4   214 _RS1	=	0x00d4
                           0000D5   215 _F0	=	0x00d5
                           0000D6   216 _AC	=	0x00d6
                           0000D7   217 _CY	=	0x00d7
                                    218 ;--------------------------------------------------------
                                    219 ; overlayable register banks
                                    220 ;--------------------------------------------------------
                                    221 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        222 	.ds 8
                                    223 ;--------------------------------------------------------
                                    224 ; internal ram data
                                    225 ;--------------------------------------------------------
                                    226 	.area DSEG    (DATA)
      000000                        227 _main_str_65536_7:
      000000                        228 	.ds 11
                                    229 ;--------------------------------------------------------
                                    230 ; overlayable items in internal ram 
                                    231 ;--------------------------------------------------------
                                    232 ;--------------------------------------------------------
                                    233 ; Stack segment in internal ram 
                                    234 ;--------------------------------------------------------
                                    235 	.area	SSEG
      000000                        236 __start__stack:
      000000                        237 	.ds	1
                                    238 
                                    239 ;--------------------------------------------------------
                                    240 ; indirectly addressable internal ram data
                                    241 ;--------------------------------------------------------
                                    242 	.area ISEG    (DATA)
                                    243 ;--------------------------------------------------------
                                    244 ; absolute internal ram data
                                    245 ;--------------------------------------------------------
                                    246 	.area IABS    (ABS,DATA)
                                    247 	.area IABS    (ABS,DATA)
                                    248 ;--------------------------------------------------------
                                    249 ; bit data
                                    250 ;--------------------------------------------------------
                                    251 	.area BSEG    (BIT)
                                    252 ;--------------------------------------------------------
                                    253 ; paged external ram data
                                    254 ;--------------------------------------------------------
                                    255 	.area PSEG    (PAG,XDATA)
                                    256 ;--------------------------------------------------------
                                    257 ; external ram data
                                    258 ;--------------------------------------------------------
                                    259 	.area XSEG    (XDATA)
                                    260 ;--------------------------------------------------------
                                    261 ; absolute external ram data
                                    262 ;--------------------------------------------------------
                                    263 	.area XABS    (ABS,XDATA)
                                    264 ;--------------------------------------------------------
                                    265 ; external initialized ram data
                                    266 ;--------------------------------------------------------
                                    267 	.area XISEG   (XDATA)
                                    268 	.area HOME    (CODE)
                                    269 	.area GSINIT0 (CODE)
                                    270 	.area GSINIT1 (CODE)
                                    271 	.area GSINIT2 (CODE)
                                    272 	.area GSINIT3 (CODE)
                                    273 	.area GSINIT4 (CODE)
                                    274 	.area GSINIT5 (CODE)
                                    275 	.area GSINIT  (CODE)
                                    276 	.area GSFINAL (CODE)
                                    277 	.area CSEG    (CODE)
                                    278 ;--------------------------------------------------------
                                    279 ; interrupt vector 
                                    280 ;--------------------------------------------------------
                                    281 	.area HOME    (CODE)
      000000                        282 __interrupt_vect:
      000000 02r00r00         [24]  283 	ljmp	__sdcc_gsinit_startup
                                    284 ;--------------------------------------------------------
                                    285 ; global & static initialisations
                                    286 ;--------------------------------------------------------
                                    287 	.area HOME    (CODE)
                                    288 	.area GSINIT  (CODE)
                                    289 	.area GSFINAL (CODE)
                                    290 	.area GSINIT  (CODE)
                                    291 	.globl __sdcc_gsinit_startup
                                    292 	.globl __sdcc_program_startup
                                    293 	.globl __start__stack
                                    294 	.globl __mcs51_genXINIT
                                    295 	.globl __mcs51_genXRAMCLEAR
                                    296 	.globl __mcs51_genRAMCLEAR
                                    297 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  298 	ljmp	__sdcc_program_startup
                                    299 ;--------------------------------------------------------
                                    300 ; Home
                                    301 ;--------------------------------------------------------
                                    302 	.area HOME    (CODE)
                                    303 	.area HOME    (CODE)
      000003                        304 __sdcc_program_startup:
      000003 02r00r48         [24]  305 	ljmp	_main
                                    306 ;	return from main will return to caller
                                    307 ;--------------------------------------------------------
                                    308 ; code
                                    309 ;--------------------------------------------------------
                                    310 	.area CSEG    (CODE)
                                    311 ;------------------------------------------------------------
                                    312 ;Allocation info for local variables in function 'GetStatus'
                                    313 ;------------------------------------------------------------
                                    314 ;	main.c:7: unsigned char GetStatus(){
                                    315 ;	-----------------------------------------
                                    316 ;	 function GetStatus
                                    317 ;	-----------------------------------------
      000000                        318 _GetStatus:
                           000007   319 	ar7 = 0x07
                           000006   320 	ar6 = 0x06
                           000005   321 	ar5 = 0x05
                           000004   322 	ar4 = 0x04
                           000003   323 	ar3 = 0x03
                           000002   324 	ar2 = 0x02
                           000001   325 	ar1 = 0x01
                           000000   326 	ar0 = 0x00
                                    327 ;	main.c:8: Data=0xff;
      000000 75 B0 FF         [24]  328 	mov	_P3,#0xff
                                    329 ;	main.c:9: RS=0;
                                    330 ;	assignBit
      000003 C2 91            [12]  331 	clr	_P1_1
                                    332 ;	main.c:10: RW=1;
                                    333 ;	assignBit
      000005 D2 92            [12]  334 	setb	_P1_2
                                    335 ;	main.c:11: E=1;
                                    336 ;	assignBit
      000007 D2 93            [12]  337 	setb	_P1_3
                                    338 ;	main.c:12: return Data;
      000009 85 B0 82         [24]  339 	mov	dpl,_P3
                                    340 ;	main.c:13: }
      00000C 22               [24]  341 	ret
                                    342 ;------------------------------------------------------------
                                    343 ;Allocation info for local variables in function 'WaitAck'
                                    344 ;------------------------------------------------------------
                                    345 ;	main.c:15: void WaitAck(){
                                    346 ;	-----------------------------------------
                                    347 ;	 function WaitAck
                                    348 ;	-----------------------------------------
      00000D                        349 _WaitAck:
                                    350 ;	main.c:16: Data=0xff;
      00000D 75 B0 FF         [24]  351 	mov	_P3,#0xff
                                    352 ;	main.c:17: RS=0;
                                    353 ;	assignBit
      000010 C2 91            [12]  354 	clr	_P1_1
                                    355 ;	main.c:18: RW=1;
                                    356 ;	assignBit
      000012 D2 92            [12]  357 	setb	_P1_2
                                    358 ;	main.c:19: E=1;
                                    359 ;	assignBit
      000014 D2 93            [12]  360 	setb	_P1_3
                                    361 ;	main.c:20: while(Data&0x80);
      000016                        362 00101$:
      000016 E5 B0            [12]  363 	mov	a,_P3
      000018 20 E7 FB         [24]  364 	jb	acc.7,00101$
                                    365 ;	main.c:21: }
      00001B 22               [24]  366 	ret
                                    367 ;------------------------------------------------------------
                                    368 ;Allocation info for local variables in function 'WriteCmd'
                                    369 ;------------------------------------------------------------
                                    370 ;cmd                       Allocated to registers r7 
                                    371 ;------------------------------------------------------------
                                    372 ;	main.c:23: void WriteCmd(unsigned char cmd){
                                    373 ;	-----------------------------------------
                                    374 ;	 function WriteCmd
                                    375 ;	-----------------------------------------
      00001C                        376 _WriteCmd:
      00001C AF 82            [24]  377 	mov	r7,dpl
                                    378 ;	main.c:24: WaitAck();
      00001E C0 07            [24]  379 	push	ar7
      000020 12r00r0D         [24]  380 	lcall	_WaitAck
      000023 D0 07            [24]  381 	pop	ar7
                                    382 ;	main.c:25: E=0;
                                    383 ;	assignBit
      000025 C2 93            [12]  384 	clr	_P1_3
                                    385 ;	main.c:26: RS=0;
                                    386 ;	assignBit
      000027 C2 91            [12]  387 	clr	_P1_1
                                    388 ;	main.c:27: RW=0;
                                    389 ;	assignBit
      000029 C2 92            [12]  390 	clr	_P1_2
                                    391 ;	main.c:28: Data=cmd;
      00002B 8F B0            [24]  392 	mov	_P3,r7
                                    393 ;	main.c:29: E=1;
                                    394 ;	assignBit
      00002D D2 93            [12]  395 	setb	_P1_3
                                    396 ;	main.c:30: E=0;
                                    397 ;	assignBit
      00002F C2 93            [12]  398 	clr	_P1_3
                                    399 ;	main.c:31: }
      000031 22               [24]  400 	ret
                                    401 ;------------------------------------------------------------
                                    402 ;Allocation info for local variables in function 'WriteDate'
                                    403 ;------------------------------------------------------------
                                    404 ;data                      Allocated to registers r7 
                                    405 ;------------------------------------------------------------
                                    406 ;	main.c:33: void WriteDate(unsigned char data){
                                    407 ;	-----------------------------------------
                                    408 ;	 function WriteDate
                                    409 ;	-----------------------------------------
      000032                        410 _WriteDate:
      000032 AF 82            [24]  411 	mov	r7,dpl
                                    412 ;	main.c:34: WaitAck();
      000034 C0 07            [24]  413 	push	ar7
      000036 12r00r0D         [24]  414 	lcall	_WaitAck
      000039 D0 07            [24]  415 	pop	ar7
                                    416 ;	main.c:35: E=0;
                                    417 ;	assignBit
      00003B C2 93            [12]  418 	clr	_P1_3
                                    419 ;	main.c:36: RS=1;
                                    420 ;	assignBit
      00003D D2 91            [12]  421 	setb	_P1_1
                                    422 ;	main.c:37: RW=0;
                                    423 ;	assignBit
      00003F C2 92            [12]  424 	clr	_P1_2
                                    425 ;	main.c:38: Data=data;
      000041 8F B0            [24]  426 	mov	_P3,r7
                                    427 ;	main.c:39: E=1;
                                    428 ;	assignBit
      000043 D2 93            [12]  429 	setb	_P1_3
                                    430 ;	main.c:40: E=0;
                                    431 ;	assignBit
      000045 C2 93            [12]  432 	clr	_P1_3
                                    433 ;	main.c:41: }
      000047 22               [24]  434 	ret
                                    435 ;------------------------------------------------------------
                                    436 ;Allocation info for local variables in function 'main'
                                    437 ;------------------------------------------------------------
                                    438 ;str                       Allocated with name '_main_str_65536_7'
                                    439 ;i                         Allocated to registers r6 r7 
                                    440 ;------------------------------------------------------------
                                    441 ;	main.c:43: void main(){
                                    442 ;	-----------------------------------------
                                    443 ;	 function main
                                    444 ;	-----------------------------------------
      000048                        445 _main:
                                    446 ;	main.c:44: unsigned char str[]="Visual GMQ";	
      000048 75*00 56         [24]  447 	mov	_main_str_65536_7,#0x56
      00004B 75*01 69         [24]  448 	mov	(_main_str_65536_7 + 0x0001),#0x69
      00004E 75*02 73         [24]  449 	mov	(_main_str_65536_7 + 0x0002),#0x73
      000051 75*03 75         [24]  450 	mov	(_main_str_65536_7 + 0x0003),#0x75
      000054 75*04 61         [24]  451 	mov	(_main_str_65536_7 + 0x0004),#0x61
      000057 75*05 6C         [24]  452 	mov	(_main_str_65536_7 + 0x0005),#0x6c
      00005A 75*06 20         [24]  453 	mov	(_main_str_65536_7 + 0x0006),#0x20
      00005D 75*07 47         [24]  454 	mov	(_main_str_65536_7 + 0x0007),#0x47
      000060 75*08 4D         [24]  455 	mov	(_main_str_65536_7 + 0x0008),#0x4d
      000063 75*09 51         [24]  456 	mov	(_main_str_65536_7 + 0x0009),#0x51
      000066 75*0A 00         [24]  457 	mov	(_main_str_65536_7 + 0x000a),#0x00
                                    458 ;	main.c:47: WriteCmd(0x38);
      000069 75 82 38         [24]  459 	mov	dpl,#0x38
      00006C 12r00r1C         [24]  460 	lcall	_WriteCmd
                                    461 ;	main.c:48: WriteCmd(0x0C);
      00006F 75 82 0C         [24]  462 	mov	dpl,#0x0c
      000072 12r00r1C         [24]  463 	lcall	_WriteCmd
                                    464 ;	main.c:49: WriteCmd(0x06);
      000075 75 82 06         [24]  465 	mov	dpl,#0x06
      000078 12r00r1C         [24]  466 	lcall	_WriteCmd
                                    467 ;	main.c:50: WriteCmd(0x01);
      00007B 75 82 01         [24]  468 	mov	dpl,#0x01
      00007E 12r00r1C         [24]  469 	lcall	_WriteCmd
                                    470 ;	main.c:52: WriteCmd(0x80|0x02);
      000081 75 82 82         [24]  471 	mov	dpl,#0x82
      000084 12r00r1C         [24]  472 	lcall	_WriteCmd
                                    473 ;	main.c:53: while(str[i]!=0){
      000087 7E 00            [12]  474 	mov	r6,#0x00
      000089 7F 00            [12]  475 	mov	r7,#0x00
      00008B                        476 00101$:
      00008B EE               [12]  477 	mov	a,r6
      00008C 24r00            [12]  478 	add	a,#_main_str_65536_7
      00008E F9               [12]  479 	mov	r1,a
      00008F E7               [12]  480 	mov	a,@r1
      000090 FD               [12]  481 	mov	r5,a
      000091 60 14            [24]  482 	jz	00105$
                                    483 ;	main.c:54: WriteDate(str[i]);
      000093 8D 82            [24]  484 	mov	dpl,r5
      000095 C0 07            [24]  485 	push	ar7
      000097 C0 06            [24]  486 	push	ar6
      000099 12r00r32         [24]  487 	lcall	_WriteDate
      00009C D0 06            [24]  488 	pop	ar6
      00009E D0 07            [24]  489 	pop	ar7
                                    490 ;	main.c:55: i++;
      0000A0 0E               [12]  491 	inc	r6
                                    492 ;	main.c:57: while(1);
      0000A1 BE 00 E7         [24]  493 	cjne	r6,#0x00,00101$
      0000A4 0F               [12]  494 	inc	r7
      0000A5 80 E4            [24]  495 	sjmp	00101$
      0000A7                        496 00105$:
                                    497 ;	main.c:59: }
      0000A7 80 FE            [24]  498 	sjmp	00105$
                                    499 	.area CSEG    (CODE)
                                    500 	.area CONST   (CODE)
                                    501 	.area XINIT   (CODE)
                                    502 	.area CABS    (ABS,CODE)
